@using System.Text.Json.Serialization
@using Newtonsoft.Json

@model VetManage.Web.Models.AccountViewModel
@{
    ViewData["Title"] = "Index";
}

<div class="content-container p-3">
    <div class="p-3 dark-5">
        <div class="d-flex d-row justify-content-between mb-3">
            <h1>Users</h1>
            <div class="m-1">
                <button type="button" id="btnNewUser" class="btn btn-outline-light">New User</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-hover table-striped" id="usersTable">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.EditUser.FirstName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.EditUser.LastName)
                        </th>
                        <th class="d-none d-sm-table-cell">
                            @Html.DisplayNameFor(model => model.EditUser.Email)
                        </th>
                        <th class="d-none d-md-table-cell">
                            @Html.DisplayNameFor(model => model.EditUser.PhoneNumber)
                        </th>
                        <th class="d-none d-lg-table-cell">
                            @Html.DisplayNameFor(model => model.EditUser.Address)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
            @foreach (var item in Model.Users) {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.FirstName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LastName)
                        </td>
                        <td class="d-none d-sm-table-cell">
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td class="d-none d-md-table-cell">
                            @Html.DisplayFor(modelItem => item.PhoneNumber)
                        </td>
                        <td class="d-none d-lg-table-cell">
                            @Html.DisplayFor(modelItem => item.Address)
                        </td>
                        <td>
                            <div class="w-100 d-grid d-md-flex justify-content-md-end">
                                <button type="button" data-action="read" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn bg-dark btn-action me-1">
                                    <i data-feather="book-open" stroke-width="1"></i>
                                </button>
                                <button type="button" data-action="edit" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn bg-dark btn-action me-1">
                                    <i data-feather="edit" stroke-width="1"></i>
                                </button>
                                <button type="button" data-action="delete" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn bg-dark btn-action me-1">
                                    <i data-feather="trash-2" stroke-width="1"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
            }
                </tbody>
            </table>
        </div>
    </div>
</div>

<partial name="_Edit" model="@Model.EditUser"/>
<partial name="_Register" model="@Model.RegisterNewUser"/>

@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $(document).ready(function() {
            let sidebar = $(".sidebar");
            let content = $(".content");
            let menuState = localStorage.getItem("menuState");
            
            setSideBar(menuState, sidebar, content);

            let editInputs = document.querySelectorAll(".edit-form-control")
            let inputs = document.querySelectorAll(".form-control")

            $("#usersNav").addClass("active");
            $("#usersNav").addClass("bg-dark");

            $(".btn-action").click(function() {
                // remove errors from ui
                $("#usersEditForm").find('.field-validation-error span').empty();
                let user = $(this).data("user");
                let action = $(this).data("action");
                let title = $("#userEditFormTitle");

                // Hide or Show the buttons depending on the action
                let readonly = organizeButtons(action, "User", title);

                // Set the fields to readonly or not depending on the action
                setReadonly(editInputs, readonly);

                // Set the value of owner being read, edited or deleted
                populateForm(editInputs, user);

                $("#editUser").modal("show");
                return false;
            });

            $("#enableEditUser").click(function() {
                let title = $("#userEditFormTitle");
                enableEdit("User", title)
                setReadonly(editInputs, false);
            });

            $("#btnNewUser").click(function() {
                // remove errors from ui
                $("#usersRegisterForm").find('.field-validation-error span').empty();

                let title = $("#userRegisterFormTitle");
                title.text("New");
                $("#createUser").removeClass("d-none");
                clearInputs(inputs);
                $("#newUser").modal("show");
            });

            $("#selectRoleEdit").change(function() {
                let roleName = $("#selectRoleEdit option:selected").text();
                $("#roleNameEdit").val(roleName);
            });

            $("#selectRoleRegister").change(function() {
                let roleName = $("#selectRoleRegister option:selected").text();
                $("#roleNameRegister").val(roleName);
            });

            // Datatable
            let table = $("#usersTable").DataTable();

            $('#usersTable tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });

            // Preview image
            $(function() {
                $(document).on("change","#imageFile", function()
                {
    		        var uploadFile = $(this);
                    var files = !!this.files ? this.files : [];
                    if (!files.length || !window.FileReader) return; // no file selected, or no FileReader support
 
                    if (/^image/.test( files[0].type)){ // only image file
                        var reader = new FileReader(); // instance of the FileReader
                        reader.readAsDataURL(files[0]); // read the local file
 
                        reader.onloadend = function(){ // set image data as background of div
                            //alert(uploadFile.closest(".upimage").find('.imagePreview').length);
                            //uploadFile.closest(".imgUp").find('.imagePreview').css("background-image", "url("+this.result+")");
                            $('.image-preview').css("background-image", "url("+this.result+")");
                        }
                    }
      
                });
            });
        });
    </script>
}