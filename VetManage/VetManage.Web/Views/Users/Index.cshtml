@using System.Text.Json.Serialization
@using Newtonsoft.Json

@model VetManage.Web.Models.AccountViewModel
@{
    ViewData["Title"] = "Index";
}

<h1>Users</h1>

<p>
    <button type="button" id="btnNewUser" class="btn btn-primary">New User</button>
</p>
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.EditUser.FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EditUser.LastName)
                </th>
                <th class="d-none d-sm-table-cell">
                    @Html.DisplayNameFor(model => model.EditUser.Email)
                </th>
                <th class="d-none d-md-table-cell">
                    @Html.DisplayNameFor(model => model.EditUser.PhoneNumber)
                </th>
                <th class="d-none d-lg-table-cell">
                    @Html.DisplayNameFor(model => model.EditUser.Address)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model.Users) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td class="d-none d-sm-table-cell">
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td class="d-none d-md-table-cell">
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td class="d-none d-lg-table-cell">
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="button" data-action="read" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn btn-primary btn-action">
                        <i class="fa fa-magnifying-glass"></i>
                    </button>
                    <button type="button" data-action="edit" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn btn-warning btn-action">
                        <i class="fa fa-pencil"></i>
                    </button>
                    <button type="button" data-action="delete" data-user="@JsonConvert.SerializeObject(item)" data-id="@item.Id" class="btn btn-danger btn-action">
                        <i class="fa fa-remove fa-lg"></i>
                    </button>
                </td>
            </tr>
    }
        </tbody>
    </table>
</div>
<partial name="_Edit" model="@Model.EditUser"/>
<partial name="_Register" model="@Model.RegisterNewUser"/>

@section Scripts{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $(document).ready(function() {
            let editInputs = document.querySelectorAll(".edit-form-control")
            let inputs = document.querySelectorAll(".form-control")

            $(".btn-action").click(function() {
                // remove errors from ui
                $("#usersEditForm").find('.field-validation-error span').empty();
                let user = $(this).data("user");
                let action = $(this).data("action");
                let title = $("#userEditFormTitle");

                // Hide or Show the buttons depending on the action
                let readonly = organizeButtons(action, "User", title);

                // Set the fields to readonly or not depending on the action
                setReadonly(editInputs, readonly);

                // Set the value of owner being read, edited or deleted
                populateForm(editInputs, user);

                $("#editUser").modal("show");
                return false;
            });

            $("#enableEditUser").click(function() {
                let title = $("#userEditFormTitle");
                enableEdit("User", title)
                setReadonly(editInputs, false);
            });

            $("#btnNewUser").click(function() {
                // remove errors from ui
                $("#usersRegisterForm").find('.field-validation-error span').empty();

                let title = $("#userRegisterFormTitle");
                title.text("New");
                $("#createUser").removeClass("d-none");
                clearInputs(inputs);
                $("#newUser").modal("show");
            });

            $("#selectRoleEdit").change(function() {
                let roleName = $("#selectRoleEdit option:selected").text();
                $("#roleNameEdit").val(roleName);
            });

            $("#selectRoleRegister").change(function() {
                let roleName = $("#selectRoleRegister option:selected").text();
                $("#roleNameRegister").val(roleName);
            });
        });
    </script>
}